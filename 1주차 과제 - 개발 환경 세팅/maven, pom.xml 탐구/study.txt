-maven, gradle
빌드 : 소스코드 혹은 프로젝트에 쓰인 파일 및 자원등을 JVM이나 톰캣같은 was가 인식할 수 있는 구조로 패키징 하는 과정 및 결과물
빌드도구 : 프로젝트 생상, 테스트 빌드, 배포 등의 작업을 위한 전용 프로그램
라이브러리가 빠른 시간 내에 늘어나고, 라이브러리의 버전 동기화의 어려움을 해소하기 위해 등장. ant / maven / gradle . 
==즉, 자바 프로젝트의 빌드를 자동화하여 편리하게 해주는 빌드 툴이다.===
====compile, package, deploy====
maven : 
프로젝트의 전반적인 라이프 사이클을 관리해줌.
필요한 라이브러리 및 외부 자료를 특정 문서(pom.xml)(project of model)에 정의해 놓으면 자동으로 내가 추가한 라이브러리뿐만 아니라 관계되어있는 다른 라이브러리들까지 자동으로 관리하여 네트워크를 통해 다운받아 줌.
<maven의 두가지 큰 설정파일>
setting.xml : 
maven 자체의 설정파일
-------------------------------------------------------------------
setting이 빌드 툴인 maven 자체를 관리하는 파일이라면
pom은 maven이라는 빌드 툴로 프로젝트의 빌드 관련 설정을 관리하기 위해 존재하는 파일
-------------------------------------------------------------------
pom.xml :
프로젝트 내 빌드옵션을 설정하는 툴
은 메이븐을 이용하는 프로젝트의 최상단(root)에 존재하는 xml형식의 파일. 프로젝트마다 하나 새성되며 를 통해 프로젝트의 모든 설정, 의존성 확인 가능
-pom.xml 요소들
<<<<<<<<<<<<프로젝트 정보>>>>>>>>>>>>>>>>
◎ modelVersion : POM model의 버전
◎ parent : 프로젝트의 계층 정보
◎ groupId : 프로젝트를 생성하는 조직의 고유 아이디를 결정한다. 일반적으로 URL의 역순으로 적는다, (com.jwc)
◎ artifactId : 프로젝트 빌드시 파일 대표이름 이다. groupId 내에서 유일해야 한다. Maven을 이용하여 빌드시 다음과 같은 규칙으로 파일이 생성 된다.
artifactid-version.packaging. 위 예의 경우 빌드할 경우 
bo-0.0.1-SNAPSHOT.war 파일이 생성된다.
◎ version : 프로젝트의 현재 버전, 프로젝트 개발 중일 때는 SNAPSHOT을 접미사로 사용. ex(1.0.0-BUILD-SNAPSHOT)
◎ packaging : 패키징 유형(jar, war, ear 등)
◎ name : 프로젝트, 프로젝트 이름
◎ description : 프로젝트에 대한 간략한 설명
◎ url : 프로젝트에 대한 참고 Reference 사이트
◎ properties : 버전관리시 용이 하다. ex) 하당 자바 버전을 선언 하고 dependencies에서 다음과 같이 활용 가능 하다.
<org.springframework-version>5.2.19.RELEASE</org.springframework-version> 이런식으로 property내부에 선언해놓으면, dependencies에서는
      <version>${org.springframework-version}</version>와 같이 사용 가능
<<<<<<<<<<<<<<의존성 라이브러리 정보>>>>>>>>>>>>>
◎ dependencies : dependencies태그 안에는 프로젝트와 의존 관계에 있는 라이브러리들을 관리 한다.
dependencies에는 Spring, Aspectj, Logging, DB등의 외부 라이브러리가 설정된다.
살펴보면 주로 groupId, artifactId, version이 세가지 요소가 대표적으로 설정되어있는 듯 하다. 간혹 exclusion이나 scope 등이 추가되어있는 형태도 보인다.
<<<<<<<<<<<<<빌드 정보>>>>>>>>>>>>>>
◎ build : 
maven의 핵심인 빌드오 관련된 정보를 설정할 수 있는 곳.
메이븐의 모든 기능은 플러그인을 기반으로 동작함
각 플러그인에서 실행 가능한 작업을 골(goal)이라고 부름, 하나의 페이즈는 하나의 골과 연결
빌드에 사용할 플러그인 목록

